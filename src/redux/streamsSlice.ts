import {
  createSlice,
  createEntityAdapter,
  PayloadAction,
} from "@reduxjs/toolkit";
import { Stream } from "@/hooks/Streams";
import { RootState } from "./store";
import { BN } from "fuels";

// Define a type that converts BN properties to strings
export type StreamSerializable = Omit<
  Stream,
  | "deposit"
  | "rate_per_second_e_10"
  | "stream_size"
  | "vested_withdrawn_amount"
  | "start_time"
  | "stop_time"
> & {
  deposit: string;
  rate_per_second_e_10: string;
  stream_size: string;
  vested_withdrawn_amount: string;
  start_time: string;
  stop_time: string;
};

// Create an entity adapter for the Stream type
const streamsAdapter = createEntityAdapter<StreamSerializable>();

// Define the initial state using the entity adapter's getInitialState method
const initialState = streamsAdapter.getInitialState();

export const serializeStream = (stream: Stream): StreamSerializable => ({
  ...stream,
  deposit: stream.deposit.toString(),
  rate_per_second_e_10: stream.rate_per_second_e_10.toString(),
  stream_size: stream.stream_size.toString(),
  vested_withdrawn_amount: stream.vested_withdrawn_amount.toString(),
  start_time: stream.start_time.toString(),
  stop_time: stream.stop_time.toString(),
});

// Function to convert StreamSerializable back to Stream
export const deserializeStream = (stream: StreamSerializable): Stream => {
  return {
    ...stream,
    deposit: new BN(stream.deposit),
    rate_per_second_e_10: new BN(stream.rate_per_second_e_10),
    stream_size: new BN(stream.stream_size),
    vested_withdrawn_amount: new BN(stream.vested_withdrawn_amount),
    start_time: new BN(stream.start_time),
    stop_time: new BN(stream.stop_time),
  };
};

// Create the slice
export const slice = createSlice({
  name: "streams",
  initialState,
  reducers: {
    setStreams: (state, action: PayloadAction<StreamSerializable[]>) => {
      // Convert BN properties to strings
      streamsAdapter.setAll(state, action.payload);
    },
    addStream: (state, action: PayloadAction<StreamSerializable>) => {
      streamsAdapter.addOne(state, action.payload);
    },
    updateStream: (state, action: PayloadAction<StreamSerializable>) => {
      streamsAdapter.updateOne(state, {
        id: action.payload.id,
        changes: action.payload,
      });
    },
    removeStream: (state, action: PayloadAction<string>) => {
      streamsAdapter.removeOne(state, action.payload);
    },
  },
});

// Export the actions
export const { setStreams, addStream, updateStream, removeStream } =
  slice.actions;

// Export the reducer
export default slice.reducer;

// Export the selectors generated by createEntityAdapter
export const {
  selectById: selectStreamById,
  selectIds: selectStreamIds,
  selectEntities: selectStreamEntities,
  selectAll: selectAllStreams,
  selectTotal: selectTotalStreams,
} = streamsAdapter.getSelectors((state: RootState) => state.streams);
