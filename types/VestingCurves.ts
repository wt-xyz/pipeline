/* Autogenerated file. Do not edit manually. */

/* eslint-disable max-classes-per-file */
/* eslint-disable @typescript-eslint/no-unused-vars */
/* eslint-disable @typescript-eslint/consistent-type-imports */

/*
  Fuels version: 0.94.5
*/

import { Contract, Interface } from "fuels";
import type {
  Provider,
  Account,
  StorageSlot,
  AbstractAddress,
  BigNumberish,
  BN,
  FunctionFragment,
  InvokeFunction,
} from 'fuels';

import type { Enum } from "./common";

export type ErrorInput = Enum<{ VestingCurveNotFound: [], InvalidVestingCurve: [], TestError: [BigNumberish, BigNumberish] }>;
export type ErrorOutput = Enum<{ VestingCurveNotFound: [], InvalidVestingCurve: [], TestError: [BN, BN] }>;
export type VestingCurveInput = Enum<{ Linear: [], PiecewiseLinear: PiecewiseLinearVestingCurveInput }>;
export type VestingCurveOutput = Enum<{ Linear: [], PiecewiseLinear: PiecewiseLinearVestingCurveOutput }>;

export type BreakpointInput = { duration_percentage_e6: BigNumberish, vested_percentage_e6: BigNumberish };
export type BreakpointOutput = { duration_percentage_e6: BN, vested_percentage_e6: BN };
export type PiecewiseLinearVestingCurveInput = { breakpoint_count: BigNumberish, breakpoints: [BreakpointInput, BreakpointInput, BreakpointInput, BreakpointInput, BreakpointInput, BreakpointInput, BreakpointInput, BreakpointInput, BreakpointInput, BreakpointInput, BreakpointInput, BreakpointInput, BreakpointInput, BreakpointInput, BreakpointInput, BreakpointInput, BreakpointInput, BreakpointInput, BreakpointInput, BreakpointInput, BreakpointInput, BreakpointInput, BreakpointInput, BreakpointInput, BreakpointInput, BreakpointInput, BreakpointInput, BreakpointInput, BreakpointInput, BreakpointInput, BreakpointInput, BreakpointInput, BreakpointInput, BreakpointInput, BreakpointInput, BreakpointInput, BreakpointInput, BreakpointInput, BreakpointInput, BreakpointInput, BreakpointInput, BreakpointInput, BreakpointInput, BreakpointInput, BreakpointInput, BreakpointInput, BreakpointInput, BreakpointInput, BreakpointInput, BreakpointInput, BreakpointInput, BreakpointInput, BreakpointInput, BreakpointInput, BreakpointInput, BreakpointInput, BreakpointInput, BreakpointInput, BreakpointInput, BreakpointInput, BreakpointInput, BreakpointInput, BreakpointInput, BreakpointInput] };
export type PiecewiseLinearVestingCurveOutput = { breakpoint_count: number, breakpoints: [BreakpointOutput, BreakpointOutput, BreakpointOutput, BreakpointOutput, BreakpointOutput, BreakpointOutput, BreakpointOutput, BreakpointOutput, BreakpointOutput, BreakpointOutput, BreakpointOutput, BreakpointOutput, BreakpointOutput, BreakpointOutput, BreakpointOutput, BreakpointOutput, BreakpointOutput, BreakpointOutput, BreakpointOutput, BreakpointOutput, BreakpointOutput, BreakpointOutput, BreakpointOutput, BreakpointOutput, BreakpointOutput, BreakpointOutput, BreakpointOutput, BreakpointOutput, BreakpointOutput, BreakpointOutput, BreakpointOutput, BreakpointOutput, BreakpointOutput, BreakpointOutput, BreakpointOutput, BreakpointOutput, BreakpointOutput, BreakpointOutput, BreakpointOutput, BreakpointOutput, BreakpointOutput, BreakpointOutput, BreakpointOutput, BreakpointOutput, BreakpointOutput, BreakpointOutput, BreakpointOutput, BreakpointOutput, BreakpointOutput, BreakpointOutput, BreakpointOutput, BreakpointOutput, BreakpointOutput, BreakpointOutput, BreakpointOutput, BreakpointOutput, BreakpointOutput, BreakpointOutput, BreakpointOutput, BreakpointOutput, BreakpointOutput, BreakpointOutput, BreakpointOutput, BreakpointOutput] };

const abi = {
  "programType": "contract",
  "specVersion": "1",
  "encodingVersion": "1",
  "concreteTypes": [
    {
      "type": "b256",
      "concreteTypeId": "7c5ee1cecf5f8eacd1284feb5f0bf2bdea533a51e2f0c9aabe9236d335989f3b"
    },
    {
      "type": "enum errors::Error",
      "concreteTypeId": "4b640168969ec78e1ff09a1a9ccc8234ffaf1b016e862a4251e06348e490b3d3",
      "metadataTypeId": 3
    },
    {
      "type": "enum libraries::structs::VestingCurve",
      "concreteTypeId": "3835a5e20658e7b55549bf5fbe6fc8d706c6a75c392c3751493a7cf27b362f6f",
      "metadataTypeId": 4
    },
    {
      "type": "u64",
      "concreteTypeId": "1506e6f44c1d6291cdf46395a8e573276a4fa79e8ace3fc891e092ef32d1b0a0"
    }
  ],
  "metadataTypes": [
    {
      "type": "()",
      "metadataTypeId": 0
    },
    {
      "type": "(_, _)",
      "metadataTypeId": 1,
      "components": [
        {
          "name": "__tuple_element",
          "typeId": "1506e6f44c1d6291cdf46395a8e573276a4fa79e8ace3fc891e092ef32d1b0a0"
        },
        {
          "name": "__tuple_element",
          "typeId": "1506e6f44c1d6291cdf46395a8e573276a4fa79e8ace3fc891e092ef32d1b0a0"
        }
      ]
    },
    {
      "type": "[_; 64]",
      "metadataTypeId": 2,
      "components": [
        {
          "name": "__array_element",
          "typeId": 5
        }
      ]
    },
    {
      "type": "enum errors::Error",
      "metadataTypeId": 3,
      "components": [
        {
          "name": "VestingCurveNotFound",
          "typeId": 0
        },
        {
          "name": "InvalidVestingCurve",
          "typeId": 0
        },
        {
          "name": "TestError",
          "typeId": 1
        }
      ]
    },
    {
      "type": "enum libraries::structs::VestingCurve",
      "metadataTypeId": 4,
      "components": [
        {
          "name": "Linear",
          "typeId": 0
        },
        {
          "name": "PiecewiseLinear",
          "typeId": 6
        }
      ]
    },
    {
      "type": "struct libraries::structs::Breakpoint",
      "metadataTypeId": 5,
      "components": [
        {
          "name": "duration_percentage_e6",
          "typeId": "1506e6f44c1d6291cdf46395a8e573276a4fa79e8ace3fc891e092ef32d1b0a0"
        },
        {
          "name": "vested_percentage_e6",
          "typeId": "1506e6f44c1d6291cdf46395a8e573276a4fa79e8ace3fc891e092ef32d1b0a0"
        }
      ]
    },
    {
      "type": "struct libraries::structs::PiecewiseLinearVestingCurve",
      "metadataTypeId": 6,
      "components": [
        {
          "name": "breakpoint_count",
          "typeId": 7
        },
        {
          "name": "breakpoints",
          "typeId": 2
        }
      ]
    },
    {
      "type": "u8",
      "metadataTypeId": 7
    }
  ],
  "functions": [
    {
      "inputs": [
        {
          "name": "curve_id",
          "concreteTypeId": "7c5ee1cecf5f8eacd1284feb5f0bf2bdea533a51e2f0c9aabe9236d335989f3b"
        }
      ],
      "name": "get_vesting_curve",
      "output": "3835a5e20658e7b55549bf5fbe6fc8d706c6a75c392c3751493a7cf27b362f6f",
      "attributes": [
        {
          "name": "storage",
          "arguments": [
            "read"
          ]
        }
      ]
    },
    {
      "inputs": [
        {
          "name": "curve",
          "concreteTypeId": "3835a5e20658e7b55549bf5fbe6fc8d706c6a75c392c3751493a7cf27b362f6f"
        }
      ],
      "name": "register_vesting_curve",
      "output": "7c5ee1cecf5f8eacd1284feb5f0bf2bdea533a51e2f0c9aabe9236d335989f3b",
      "attributes": [
        {
          "name": "storage",
          "arguments": [
            "read",
            "write"
          ]
        }
      ]
    },
    {
      "inputs": [
        {
          "name": "curve_id",
          "concreteTypeId": "7c5ee1cecf5f8eacd1284feb5f0bf2bdea533a51e2f0c9aabe9236d335989f3b"
        },
        {
          "name": "total_amount",
          "concreteTypeId": "1506e6f44c1d6291cdf46395a8e573276a4fa79e8ace3fc891e092ef32d1b0a0"
        },
        {
          "name": "start_time",
          "concreteTypeId": "1506e6f44c1d6291cdf46395a8e573276a4fa79e8ace3fc891e092ef32d1b0a0"
        },
        {
          "name": "end_time",
          "concreteTypeId": "1506e6f44c1d6291cdf46395a8e573276a4fa79e8ace3fc891e092ef32d1b0a0"
        },
        {
          "name": "current_time",
          "concreteTypeId": "1506e6f44c1d6291cdf46395a8e573276a4fa79e8ace3fc891e092ef32d1b0a0"
        }
      ],
      "name": "vested_amount",
      "output": "1506e6f44c1d6291cdf46395a8e573276a4fa79e8ace3fc891e092ef32d1b0a0",
      "attributes": [
        {
          "name": "storage",
          "arguments": [
            "read"
          ]
        }
      ]
    },
    {
      "inputs": [
        {
          "name": "curve_id",
          "concreteTypeId": "7c5ee1cecf5f8eacd1284feb5f0bf2bdea533a51e2f0c9aabe9236d335989f3b"
        },
        {
          "name": "duration_percentage_e6",
          "concreteTypeId": "1506e6f44c1d6291cdf46395a8e573276a4fa79e8ace3fc891e092ef32d1b0a0"
        }
      ],
      "name": "vested_percentage_e6",
      "output": "1506e6f44c1d6291cdf46395a8e573276a4fa79e8ace3fc891e092ef32d1b0a0",
      "attributes": [
        {
          "name": "storage",
          "arguments": [
            "read"
          ]
        }
      ]
    }
  ],
  "loggedTypes": [
    {
      "logId": "1515152261580153489",
      "concreteTypeId": "1506e6f44c1d6291cdf46395a8e573276a4fa79e8ace3fc891e092ef32d1b0a0"
    },
    {
      "logId": "5432468599230875534",
      "concreteTypeId": "4b640168969ec78e1ff09a1a9ccc8234ffaf1b016e862a4251e06348e490b3d3"
    }
  ],
  "messagesTypes": [],
  "configurables": []
};

const storageSlots: StorageSlot[] = [];

export class VestingCurvesInterface extends Interface {
  constructor() {
    super(abi);
  }

  declare functions: {
    get_vesting_curve: FunctionFragment;
    register_vesting_curve: FunctionFragment;
    vested_amount: FunctionFragment;
    vested_percentage_e6: FunctionFragment;
  };
}

export class VestingCurves extends Contract {
  static readonly abi = abi;
  static readonly storageSlots = storageSlots;

  declare interface: VestingCurvesInterface;
  declare functions: {
    get_vesting_curve: InvokeFunction<[curve_id: string], VestingCurveOutput>;
    register_vesting_curve: InvokeFunction<[curve: VestingCurveInput], string>;
    vested_amount: InvokeFunction<[curve_id: string, total_amount: BigNumberish, start_time: BigNumberish, end_time: BigNumberish, current_time: BigNumberish], BN>;
    vested_percentage_e6: InvokeFunction<[curve_id: string, duration_percentage_e6: BigNumberish], BN>;
  };

  constructor(
    id: string | AbstractAddress,
    accountOrProvider: Account | Provider,
  ) {
    super(id, abi, accountOrProvider);
  }
}
